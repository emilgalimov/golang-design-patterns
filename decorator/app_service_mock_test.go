package main

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/emilgalimov/golang-design-patterns/decorator.appService -o ./decorator/app_service_mock_test.go -n AppServiceMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// AppServiceMock implements appService
type AppServiceMock struct {
	t minimock.Tester

	funcprocessRequest          func(s1 string) (s2 string)
	inspectFuncprocessRequest   func(s1 string)
	afterprocessRequestCounter  uint64
	beforeprocessRequestCounter uint64
	processRequestMock          mAppServiceMockprocessRequest
}

// NewAppServiceMock returns a mock for appService
func NewAppServiceMock(t minimock.Tester) *AppServiceMock {
	m := &AppServiceMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.processRequestMock = mAppServiceMockprocessRequest{mock: m}
	m.processRequestMock.callArgs = []*AppServiceMockprocessRequestParams{}

	return m
}

type mAppServiceMockprocessRequest struct {
	mock               *AppServiceMock
	defaultExpectation *AppServiceMockprocessRequestExpectation
	expectations       []*AppServiceMockprocessRequestExpectation

	callArgs []*AppServiceMockprocessRequestParams
	mutex    sync.RWMutex
}

// AppServiceMockprocessRequestExpectation specifies expectation struct of the appService.processRequest
type AppServiceMockprocessRequestExpectation struct {
	mock    *AppServiceMock
	params  *AppServiceMockprocessRequestParams
	results *AppServiceMockprocessRequestResults
	Counter uint64
}

// AppServiceMockprocessRequestParams contains parameters of the appService.processRequest
type AppServiceMockprocessRequestParams struct {
	s1 string
}

// AppServiceMockprocessRequestResults contains results of the appService.processRequest
type AppServiceMockprocessRequestResults struct {
	s2 string
}

// Expect sets up expected params for appService.processRequest
func (mmprocessRequest *mAppServiceMockprocessRequest) Expect(s1 string) *mAppServiceMockprocessRequest {
	if mmprocessRequest.mock.funcprocessRequest != nil {
		mmprocessRequest.mock.t.Fatalf("AppServiceMock.processRequest mock is already set by Set")
	}

	if mmprocessRequest.defaultExpectation == nil {
		mmprocessRequest.defaultExpectation = &AppServiceMockprocessRequestExpectation{}
	}

	mmprocessRequest.defaultExpectation.params = &AppServiceMockprocessRequestParams{s1}
	for _, e := range mmprocessRequest.expectations {
		if minimock.Equal(e.params, mmprocessRequest.defaultExpectation.params) {
			mmprocessRequest.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmprocessRequest.defaultExpectation.params)
		}
	}

	return mmprocessRequest
}

// Inspect accepts an inspector function that has same arguments as the appService.processRequest
func (mmprocessRequest *mAppServiceMockprocessRequest) Inspect(f func(s1 string)) *mAppServiceMockprocessRequest {
	if mmprocessRequest.mock.inspectFuncprocessRequest != nil {
		mmprocessRequest.mock.t.Fatalf("Inspect function is already set for AppServiceMock.processRequest")
	}

	mmprocessRequest.mock.inspectFuncprocessRequest = f

	return mmprocessRequest
}

// Return sets up results that will be returned by appService.processRequest
func (mmprocessRequest *mAppServiceMockprocessRequest) Return(s2 string) *AppServiceMock {
	if mmprocessRequest.mock.funcprocessRequest != nil {
		mmprocessRequest.mock.t.Fatalf("AppServiceMock.processRequest mock is already set by Set")
	}

	if mmprocessRequest.defaultExpectation == nil {
		mmprocessRequest.defaultExpectation = &AppServiceMockprocessRequestExpectation{mock: mmprocessRequest.mock}
	}
	mmprocessRequest.defaultExpectation.results = &AppServiceMockprocessRequestResults{s2}
	return mmprocessRequest.mock
}

//Set uses given function f to mock the appService.processRequest method
func (mmprocessRequest *mAppServiceMockprocessRequest) Set(f func(s1 string) (s2 string)) *AppServiceMock {
	if mmprocessRequest.defaultExpectation != nil {
		mmprocessRequest.mock.t.Fatalf("Default expectation is already set for the appService.processRequest method")
	}

	if len(mmprocessRequest.expectations) > 0 {
		mmprocessRequest.mock.t.Fatalf("Some expectations are already set for the appService.processRequest method")
	}

	mmprocessRequest.mock.funcprocessRequest = f
	return mmprocessRequest.mock
}

// When sets expectation for the appService.processRequest which will trigger the result defined by the following
// Then helper
func (mmprocessRequest *mAppServiceMockprocessRequest) When(s1 string) *AppServiceMockprocessRequestExpectation {
	if mmprocessRequest.mock.funcprocessRequest != nil {
		mmprocessRequest.mock.t.Fatalf("AppServiceMock.processRequest mock is already set by Set")
	}

	expectation := &AppServiceMockprocessRequestExpectation{
		mock:   mmprocessRequest.mock,
		params: &AppServiceMockprocessRequestParams{s1},
	}
	mmprocessRequest.expectations = append(mmprocessRequest.expectations, expectation)
	return expectation
}

// Then sets up appService.processRequest return parameters for the expectation previously defined by the When method
func (e *AppServiceMockprocessRequestExpectation) Then(s2 string) *AppServiceMock {
	e.results = &AppServiceMockprocessRequestResults{s2}
	return e.mock
}

// processRequest implements appService
func (mmprocessRequest *AppServiceMock) processRequest(s1 string) (s2 string) {
	mm_atomic.AddUint64(&mmprocessRequest.beforeprocessRequestCounter, 1)
	defer mm_atomic.AddUint64(&mmprocessRequest.afterprocessRequestCounter, 1)

	if mmprocessRequest.inspectFuncprocessRequest != nil {
		mmprocessRequest.inspectFuncprocessRequest(s1)
	}

	mm_params := &AppServiceMockprocessRequestParams{s1}

	// Record call args
	mmprocessRequest.processRequestMock.mutex.Lock()
	mmprocessRequest.processRequestMock.callArgs = append(mmprocessRequest.processRequestMock.callArgs, mm_params)
	mmprocessRequest.processRequestMock.mutex.Unlock()

	for _, e := range mmprocessRequest.processRequestMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s2
		}
	}

	if mmprocessRequest.processRequestMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmprocessRequest.processRequestMock.defaultExpectation.Counter, 1)
		mm_want := mmprocessRequest.processRequestMock.defaultExpectation.params
		mm_got := AppServiceMockprocessRequestParams{s1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmprocessRequest.t.Errorf("AppServiceMock.processRequest got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmprocessRequest.processRequestMock.defaultExpectation.results
		if mm_results == nil {
			mmprocessRequest.t.Fatal("No results are set for the AppServiceMock.processRequest")
		}
		return (*mm_results).s2
	}
	if mmprocessRequest.funcprocessRequest != nil {
		return mmprocessRequest.funcprocessRequest(s1)
	}
	mmprocessRequest.t.Fatalf("Unexpected call to AppServiceMock.processRequest. %v", s1)
	return
}

// processRequestAfterCounter returns a count of finished AppServiceMock.processRequest invocations
func (mmprocessRequest *AppServiceMock) processRequestAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmprocessRequest.afterprocessRequestCounter)
}

// processRequestBeforeCounter returns a count of AppServiceMock.processRequest invocations
func (mmprocessRequest *AppServiceMock) processRequestBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmprocessRequest.beforeprocessRequestCounter)
}

// Calls returns a list of arguments used in each call to AppServiceMock.processRequest.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmprocessRequest *mAppServiceMockprocessRequest) Calls() []*AppServiceMockprocessRequestParams {
	mmprocessRequest.mutex.RLock()

	argCopy := make([]*AppServiceMockprocessRequestParams, len(mmprocessRequest.callArgs))
	copy(argCopy, mmprocessRequest.callArgs)

	mmprocessRequest.mutex.RUnlock()

	return argCopy
}

// MinimockprocessRequestDone returns true if the count of the processRequest invocations corresponds
// the number of defined expectations
func (m *AppServiceMock) MinimockprocessRequestDone() bool {
	for _, e := range m.processRequestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.processRequestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterprocessRequestCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcprocessRequest != nil && mm_atomic.LoadUint64(&m.afterprocessRequestCounter) < 1 {
		return false
	}
	return true
}

// MinimockprocessRequestInspect logs each unmet expectation
func (m *AppServiceMock) MinimockprocessRequestInspect() {
	for _, e := range m.processRequestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppServiceMock.processRequest with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.processRequestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterprocessRequestCounter) < 1 {
		if m.processRequestMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to AppServiceMock.processRequest")
		} else {
			m.t.Errorf("Expected call to AppServiceMock.processRequest with params: %#v", *m.processRequestMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcprocessRequest != nil && mm_atomic.LoadUint64(&m.afterprocessRequestCounter) < 1 {
		m.t.Error("Expected call to AppServiceMock.processRequest")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AppServiceMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockprocessRequestInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AppServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AppServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockprocessRequestDone()
}
